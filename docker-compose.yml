version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "4700:8000"  # Backend API
      - "4705:8001"  # Metrics port
    environment:
      - DEBUG=false
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
      - GOOGLE_CLOUD_LOCATION=${GOOGLE_CLOUD_LOCATION}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://veogen:veogen123@postgres:5432/veogen
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/outputs:/app/outputs
      - ./backend/temp:/app/temp
      - ./backend/logs:/app/logs
      - google_credentials:/app/credentials
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
    depends_on:
      - postgres
      - redis
      - loki
    networks:
      - veogen-network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=veogen-backend"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "promtail.enabled=true"
      - "promtail.job=veogen-backend"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "4710:3000"  # Frontend
    environment:
      - REACT_APP_API_URL=http://localhost:4700
      - REACT_APP_VERSION=1.0.0
      - REACT_APP_GRAFANA_URL=http://localhost:4715
    depends_on:
      - backend
    networks:
      - veogen-network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=veogen-frontend"
    labels:
      - "promtail.enabled=true"
      - "promtail.job=veogen-frontend"

  postgres:
    image: postgres:15-alpine
    ports:
      - "4715:5432"  # PostgreSQL
    environment:
      - POSTGRES_DB=veogen
      - POSTGRES_USER=veogen
      - POSTGRES_PASSWORD=veogen123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - veogen-network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=postgres"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U veogen -d veogen"]
      interval: 30s
      timeout: 5s
      retries: 5
    labels:
      - "promtail.enabled=true"
      - "promtail.job=postgres"

  redis:
    image: redis:7-alpine
    ports:
      - "4720:6379"  # Redis
    command: redis-server --appendonly yes --requirepass veogen123
    volumes:
      - redis_data:/data
    networks:
      - veogen-network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=redis"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    labels:
      - "promtail.enabled=true"
      - "promtail.job=redis"

  # Grafana for dashboards and visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "4725:3000"  # Grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=veogen123
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/dashboard-configs:/var/lib/grafana/dashboards:ro
    networks:
      - veogen-network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=grafana"
    labels:
      - "promtail.enabled=true"
      - "promtail.job=grafana"

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/tmp/loki
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - ./monitoring/loki-rules:/tmp/loki/rules
    networks:
      - veogen-network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=loki"
    labels:
      - "promtail.enabled=true"
      - "promtail.job=loki"

  # Promtail for log shipping
  promtail:
    image: grafana/promtail:latest
    ports:
      - "4735:9080"  # Promtail
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - ./backend/logs:/app/logs:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - veogen-network
    restart: unless-stopped
    depends_on:
      - loki
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=promtail"

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "4740:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - alertmanager
    networks:
      - veogen-network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=prometheus"
    labels:
      - "promtail.enabled=true"
      - "promtail.job=prometheus"

  # Alertmanager for alert handling
  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "4745:9093"  # Alertmanager
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:4745'
    networks:
      - veogen-network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=alertmanager"
    labels:
      - "promtail.enabled=true"
      - "promtail.job=alertmanager"

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "4750:9100"  # Node Exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - veogen-network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=node-exporter"

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "4755:8080"  # cAdvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    privileged: true
    networks:
      - veogen-network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=cadvisor"

  nginx:
    image: nginx:alpine
    ports:
      - "4760:80"   # Nginx HTTP
      - "4765:443"  # Nginx HTTPS
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_files:/var/www/static
    depends_on:
      - frontend
      - backend
      - grafana
    networks:
      - veogen-network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=nginx"
    labels:
      - "promtail.enabled=true"
      - "promtail.job=nginx"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  google_credentials:
    driver: local
  static_files:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  prometheus_data:
    driver: local
  alertmanager_data:
    driver: local

networks:
  veogen-network:
    driver: bridge
