# Update-Readmes.ps1
# This script updates or creates README.md files in all subdirectories of the docs folder

# Get the directory where this script is located
$scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$docsRoot = $scriptDir

# Function to create a standardized README
function New-StandardReadme {
    param (
        [string]$dirName,
        [string]$parentDir = ""
    )
    
    $title = ($dirName -replace '_', ' ' -replace '-', ' ').Trim() -replace '\s+', ' '
    $title = (Get-Culture).TextInfo.ToTitleCase($title.ToLower())
    
    # If this is a date-prefixed directory, format the title better
    if ($dirName -match '^\d{4}-\d{2}-\d{2}_') {
        $datePart = $dirName -replace '(^\d{4}-\d{2}-\d{2})_.*', '$1'
        $titlePart = $dirName -replace '^\d{4}-\d{2}-\d{2}_', '' -replace '-', ' '
        $title = "$datePart - $(Get-Culture).TextInfo.ToTitleCase($titlePart.ToLower())"
    }
    
    $parentBreadcrumb = if ($parentDir) { "[$parentDir](../) > " } else { "" }
    
    @"
# $parentBreadcrumb$title

## Overview
This directory contains documentation related to $title.

## Contents

<!-- toc -->

- [Files](#files)
- [Related Documents](#related-documents)

## Files

<!-- files list will be auto-generated by Docsify -->

## Related Documents

- [Parent Directory](../)
- [Documentation Home](../../)

## Last Updated

$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')

*This file was automatically generated by the update_readmes.ps1 script.*
"@
}

# Function to update a README if needed
function Update-Readme {
    param (
        [string]$dir,
        [string]$parentDirName = ""
    )
    
    $readmePath = Join-Path $dir "README.md"
    $dirName = Split-Path $dir -Leaf
    
    # Skip node_modules and other special directories
    if ($dirName -eq 'node_modules' -or $dirName.StartsWith('.')) {
        Write-Host "Skipping special directory: $dir" -ForegroundColor Yellow
        return
    }
    
    # Skip if this is a file
    if (Test-Path -Path $dir -PathType Leaf) {
        return
    }
    
    # Create or update README.md
    if (-not (Test-Path $readmePath) -or (Get-Item $readmePath).Length -eq 0) {
        Write-Host "Creating README.md in: $dir" -ForegroundColor Green
        $content = New-StandardReadme -dirName $dirName -parentDir $parentDirName
        $content | Out-File -FilePath $readmePath -Encoding utf8
    } else {
        # Check if this is an auto-generated README that needs updating
        $content = Get-Content $readmePath -Raw
        if ($content -match 'This file was automatically generated by the update_readmes.ps1 script') {
            Write-Host "Updating README.md in: $dir" -ForegroundColor Cyan
            $newContent = New-StandardReadme -dirName $dirName -parentDir $parentDirName
            $newContent | Out-File -FilePath $readmePath -Encoding utf8 -Force
        } else {
            Write-Host "Skipping existing custom README.md in: $dir" -ForegroundColor Yellow
        }
    }
}

# Main execution
Write-Host "Starting README update process..." -ForegroundColor Cyan

# Process all directories recursively
Get-ChildItem -Path $docsRoot -Directory -Recurse | ForEach-Object {
    $relativePath = $_.FullName.Substring($docsRoot.Length).TrimStart('\')
    $parentDir = if ($_.Parent.FullName -ne $docsRoot) { $_.Parent.Name } else { "" }
    
    # Skip node_modules and hidden directories
    if ($relativePath -notmatch '\\node_modules\\' -and -not $_.Name.StartsWith('.')) {
        Update-Readme -dir $_.FullName -parentDirName $parentDir
    }
}

Write-Host "\nREADME update process completed!" -ForegroundColor Green
